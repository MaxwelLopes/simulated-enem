generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id                 Int                @id @default(autoincrement())
  name               String             @unique
  questionCategories QuestionCategory[]
}

model Discipline {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  questions Question[]
}

model Subject {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  questions Question[]
}

model Question {
  id                       Int                 @id @default(autoincrement())
  year                     String
  disciplineId             Int?                @map("disciplineId")
  subjectId                Int?                @map("subjectId")
  context                  String?
  alternativesIntroduction String?
  correctAlternative       String              @db.VarChar(1)
  alternatives             Alternative[]
  discipline               Discipline?         @relation(fields: [disciplineId], references: [id])
  subject                  Subject?            @relation(fields: [subjectId], references: [id])
  categories               QuestionCategory[]
  simulatedQuestions       SimulatedQuestion[]
}

model Alternative {
  id         Int      @id @default(autoincrement())
  questionId Int      @map("questionId")
  letter     String
  text       String
  isCorrect  Boolean  @default(false)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuestionCategory {
  questionId Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@id([questionId, categoryId])
}

model Simulated {
  id                    String                @id @default(uuid()) @db.Uuid
  type                  String                @db.VarChar(100)
  userId                String                @db.Uuid
  createdAt             DateTime              @default(now()) @db.Timestamp(0)
  finishedAt            DateTime?             @db.Timestamp(0)
  status                String                @db.VarChar(20)
  review                Boolean?              @default(false)
  unseen                Boolean?              @default(false)
  subtype               String[]              @db.VarChar(200)
  correctAnswers        Int                   @default(0)
  totalQuestions        Int                   @default(0)
  completionTimeSeconds Int?
  essayId               Int?
  userText              String?
  essayScore            Int?
  essay                 Essay?                @relation(fields: [essayId], references: [id])
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  simulatedEssayScores  SimulatedEssayScore[]
  simulatedQuestions    SimulatedQuestion[]
}

model SimulatedQuestion {
  simulatedId String    @db.Uuid
  questionId  Int
  hit         Boolean?
  response    String?
  createdAt   DateTime  @default(now()) @db.Timestamp(0)
  lastSeenAt  DateTime? @db.Timestamp(0)
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  simulated   Simulated @relation(fields: [simulatedId], references: [id], onDelete: Cascade)

  @@id([simulatedId, questionId])
}

model User {
  id        String      @id @db.Uuid
  name      String      @db.VarChar(255)
  email     String      @unique @db.VarChar(255)
  password  String
  createdAt DateTime    @default(now()) @db.Timestamp(0)
  simulated Simulated[]
  lastEssayDate  DateTime?   @db.Timestamp(0) 
}

model Essay {
  id                Int         @id @default(autoincrement())
  createdAt         DateTime    @default(now()) @db.Timestamp(0)
  updatedAt         DateTime    @updatedAt @db.Timestamp(0)
  year              String?     @db.VarChar(4)
  motivationalTexts String[]
  theme             String
  isFromInep        Boolean     @default(false)
  simulated         Simulated[]
}

model SimulatedEssayScore {
  id            Int       @id @default(autoincrement())
  simulatedId   String    @db.Uuid
  criterion     String
  score         Int
  justification String?
  simulated     Simulated @relation(fields: [simulatedId], references: [id], onDelete: Cascade)
}
